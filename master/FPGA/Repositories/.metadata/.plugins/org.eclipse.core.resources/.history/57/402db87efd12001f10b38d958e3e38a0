// /* main.c
//  *
//  * Created on: 5 April 2021
//  *
//  * Author: Benjamin Evans
//  *
//  * Description: Main top level file for Pong game which uses the HPS timer and IRQ interrupts to function
//  */

// // Included header files -----------------------------------------------------------------------------
// #include "HPS_Watchdog/HPS_Watchdog.h"
// #include "DE1SoC_LT24/DE1SoC_LT24.h"
// // #include "DE1SoC_WM8731/DE1SoC_WM8731.h"
// #include "DE1SoC_Mandelbrot/DE1SoC_Mandelbrot.h" // Mandelbrot Pattern Animation Generator
// // #include "Interrupts/Interrupts.h"
// #include "Zhu/LCD.h"
// #include "GameLogic/gamelogic.h"
// #include "Zhu/bitmap.h"

// // Debugging Function from ELEC5620M - Unit 3.2 Lab Task 2 - 3-2-DisplayTest\main.c
// // void exitOnFail(signed int status, signed int successStatus){
// //     if (status != successStatus) {
// //         exit((int)status); //Add breakpoint here to catch failure
// //     }
// // }
// PLT24Ctx_t ctx;
// int main(void){
// 	// Initialise and Configure IRQs
// 	// HPS_IRQ_initialise(NULL);
// 	// HPS_ResetWatchdog();
// 	// ConfigureTimeInterrupt();
// 	// ConfigureKeyInterrupt();
// 	printf("begin\n");
// 	// Initialise the LCD Display
// 	LCDinitial();
	
// 	usleep(5000000); 
// 	// LT24_clearDisplay(LT24_BLACK);
// 	// Intitialsise the Private timer
//     IntitialiseTimer(); 
// 	// LCDclear(LT24_BLACK);
// 	while(1) {

// 		// Software Flow control
// 		PongFSM();

// 		// Reset watchdog
// 		HPS_ResetWatchdog();
// 	}
// }



#include"main.h"
// unsigned short frameBuffer[76800];

// unsigned int keyPressed;
int main(void) {
    //Variables
    PLT24Ctx_t lt24;
    printf("begin\n");
    //initialize LCD
    LCDinitial();
	// drivers = ISR_initialize();
	drivers.hpsTimer = (unsigned int*)LSC_BASE_HPS_TIMERSP0;

    // Initialise drivers
    // HPS_GPIO_initialise(LSC_BASE_ARM_GPIO, ARM_GPIO_DIR, 0, 0, &drivers.hpsIo);
    FPGA_PIO_initialise(LSC_BASE_KEYS, LSC_CONFIG_KEYS, &drivers.keys);
    // FPGA_PIO_initialise(LSC_BASE_7SEG_0to3, LSC_CONFIG_7SEG, &drivers.hex0to3);
    
    //Set HPS LED low
    // HPS_GPIO_setOutput(drivers.hpsIo, 0, ARM_GPIO_HPS_LED);

    //Initialise IRQs
    HPS_IRQ_initialise(false,NULL);
    HPS_ResetWatchdog();

    // Register interrupt handler for timer. We provide a pointer to our drivers
    // structure as a parameter so that we can make use of it in the interrupt handler
    HPS_IRQ_registerHandler(IRQ_TIMER_L4SP_0, timerISR, &drivers);
    // Configure HPS Timer to interrupt every second
    // Timer base address
    drivers.hpsTimer[2] = 0; // write to control register to stop timer
    // Set the timer period
    drivers.hpsTimer[0] = 500000000; // period = 1/(100 MHz) x (100 x 10^6) = 1 sec
    // Write to control register to start timer, with interrupts
    drivers.hpsTimer[2] = 0x03; // mode = 1, enable = 1
    HPS_ResetWatchdog();

    // Register interrupt handler for keys
    HPS_IRQ_registerHandler(IRQ_LSC_KEYS, pushbuttonISR, &drivers);
    // Configure Push Buttons to interrupt on press
    FPGA_PIO_setInterruptEnable(drivers.keys, 0xF, 0xF); // Enable interrupts for all four KEYs
    HPS_ResetWatchdog();

    //Finally we enable the interrupts
    HPS_IRQ_globalEnable(true);
	// Intitialsise the Private timer
    IntitialiseTimer(); 
    //Wait a moment
    Drawbackground(bg);
    //Main Run Loop
    while (1) {
		HPS_ResetWatchdog();
		HpsErr_t wasDisabled = HPS_IRQ_globalEnable(false);
    	unsigned int keyPressed = drivers.keyPressed;
    	drivers.keyPressed = 0;
    	HPS_IRQ_globalEnable(wasDisabled != ERR_SKIPPED);
    	HPS_ResetWatchdog();
		// printf("wasDisabled = %d\n",wasDisabled);
		// printf("keyPressed = %d\n",keyPressed);
		// printf("drivers.keyPressed = %d\n",drivers.keyPressed);
    	//basical code
    	switch(state){
    		case menu:
    			Drawbackground(bg);
    			FrameBuffer_map(heart, 20, 20, 20, 20);
    			DrawString(70, 10, "Game Box", LT24_RED);
    			DrawString(70, 50, "Menu:", LT24_RED);
    			DrawString(50, 80, "1.Bounce Ball", LT24_RED);
    			DrawString(50, 110, "2.car", LT24_RED);
    			Drawscreen();
    			if (keyPressed == 0x1)  state = intro;
    			if (keyPressed == 0x2)  {
    				LCDclear(LT24_GREEN);
    				Drawscreen();
    				state = game1;
    			}
    			if (keyPressed == 0x4)  {
    				LCDclear(LT24_WHITE);
    				Drawscreen();
    				state = game2;

    			}


    		break;
    		case intro:
    			LCDclear(LT24_WHITE);
    			FrameBuffer_map(heart, 20, 20, 20, 20);
    			Drawscreen();
    			if (keyPressed == 0x2)  {
    				Drawbackground(bg2);
    				state = menu;

    			}
    			if (keyPressed == 0x4)  state = game1;

    		break;
    		case game1:
    			
    			
				PongFSM();
				HPS_ResetWatchdog();

    			


    		break;
    		case game2:

    			game2_start();


    		break;
    	}




		keyPressed = 0;
        //Finally reset the watchdog.
        HPS_ResetWatchdog();
    }
}

